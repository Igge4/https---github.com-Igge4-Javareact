<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

  <style type="text/css">
        body{
        color: #FFF;
        background-color:#00ddff;
        font-size: 1.5em;
        height: 100vh;
        }
 </style>

    <script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

 <!-- Using a newer version of React (also using the production build, you might also wanna check the developement build) -->
  </head>

  <body>
    <div class="container-fluid">
      <div class="row">
        <div class="col-6">
          <div id="SeekCustomer" class="d-flex align-items-center">
          </div>
        </div>
        <div class="col-6">
          <div id="ListCustomer"
        </div>
      </div>
    </div>
    
    <script type="text/babel">
	  class MyCustomersDisplay extends React.Component {
      constructor(props) {
        super(props)
        // customerIndex only part of the state that will change
        // reset is a property call Customers which is an array of customers objects
        this.state = {
           customerIndex: 0,
           customers: [],
           isLoading: true
         }
        }

         handleChange = e => {
			// setState() is async
			this.setState({ customerIndex: event.target.value });
			/*
				that means don't do anything here that requires an updated customerIndex
				they will change when setState has finished
			*/
        }
      componentDidMount() {
      fetch("https://ecexam-webapi.azurewebsites.net/api/customers")
      .then(response => response.json())
      .then(data => this.setState({ customers: data, isLoading: false}));
  }
        render() {
			// The following code use React Fragment
			// Recall .map() is a way to loop over an array 
			// React requires you to pass in the key={} prop
			// https://reactjs.org/docs/lists-and-keys.html 
      /*
				we cannot do the real rendering until the data file is read (asynchronously) 
				hence the introduction of the isLoading attribute of the state 
			*/
			if(this.state.isLoading){
				return (<p>Loading ....</p>)
			}else{
			return (
				<> {/* React Fragment instead of a div to meet the single parent criterion */}
				<select value={this.state.customerIndex} onChange={this.handleChange}>
					{
						this.state.customers.map((custo, i) => 
							(
							<option key={i} value={i}>
								# {custo.id}
							</option>
							)
						)
					}
        </select>
              <br />
			  {/*	THIS IS A JSX COMMENT WITHIN REACT -- note curly braces around JS comment
					this.state.customers is an array of objects
					we want the element with an index this.state.customerIndex 
					we want the book_cover property of that object	
			  */}
              <br />First Name: {this.state.customers[this.state.customerIndex].firstName}
              <br />Last Name: {this.state.customers[this.state.customerIndex].lastName}
              <br />Email: {this.state.customers[this.state.customerIndex].email}

              </>
              ) //match return
        }
        } //match render
      } //end MyCustomersDisplay class
      ReactDOM.render(<MyCustomersDisplay />, document.querySelector('#SeekCustomer'))



     /****Get list of customers****/
     function ListOfCustomers() {
      const [customers, setCustomers] = useState([])
      useEffect(() => {  
        async function fetchData() {
          const res = await fetch("https://ecexam-webapi.azurewebsites.net/api/customers")
          setCustomers(await res.json())
    }
    fetchData()
  }, [])

  return (
    <div className="container mt-5">
        <div className="row row-cols-1 row-cols-md-3 g-4">

        {
          customers.map(test => (
            <div key={test.id} className="col">
              <h5 className="card-title">{test.firstName} {test.lastName}</h5>
                    <p className="card-text">{test.email}</p>
            </div>
          ))
        }

        </div>
    </div>
    );
}
      </script>
    











